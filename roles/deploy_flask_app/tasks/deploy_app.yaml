---
- name: Generate configuration (inventory, vars) from templates
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  with_items:
    - src: inventory.j2
      dest: ~/inventory.ini
    - src: vars.yaml.j2
      dest: vars.yaml

- name: Ensure workers are reachable from bastion host
  ansible.builtin.command:
    cmd: "ansible -m ping -i ~/inventory.ini all"

- name: Initialize database tables
  ansible.builtin.shell:
    cmd: >
      podman run --rm
      -e FLASK_APP="{{ deploy_flask_app_config.app_dir }}"
      -e FLASK_ENV="{{ deploy_flask_app_config.env }}"
      -e DATABASE_HOST="{{ deploy_flask_app_setup.add_host.host_vars.host_config.rds_info.host }}"
      -e DATABASE_INSTANCE="{{ deploy_flask_app_setup.add_host.host_vars.host_config.rds_info.name }}"
      -e DATABASE_USER="{{ deploy_flask_app_setup.add_host.host_vars.host_config.rds_info.master_username }}"
      -e DATABASE_PASSWORD="{{ deploy_flask_app_setup.add_host.host_vars.host_config.rds_info.master_user_password }}"
      -e ADMIN_USER="{{ deploy_flask_app_config.admin_user }}"
      -e ADMIN_PASSWORD="{{ deploy_flask_app_config.admin_password }}"
      -e WORKER_HOSTNAME="{{ inventory_hostname }}"
      -e WORKERS_HOSTS="bastion"
      webapp flask {{ deploy_flask_app_force_init | bool | ternary('force-init-db', 'init-db') }}
  run_once: true
  changed_when: false

- name: Copy playbook into bastion host
  ansible.builtin.copy:
    src: run_app.yaml
    dest: ~/playbook.yaml
    mode: 0644

- name: Deploy application into workers
  ansible.builtin.shell:
    cmd: >
      ansible-playbook playbook.yaml -i inventory.ini -vvv
      -e '@vars.yaml'
      -e registry_host_port='{{ deploy_flask_app_setup.add_host.host_vars.host_config.private_ip }}:{{ deploy_flask_app_listening_port }}'
  args:
    chdir: ~/
  changed_when: false

- name: Debug application url
  ansible.builtin.debug:
    msg: "Application url: {{ deploy_flask_app_lb_result.elb.dns_name }}:{{ deploy_flask_app_listening_port }}"
