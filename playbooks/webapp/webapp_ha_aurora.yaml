---
- name: Webapp HA
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/main.yaml

  tasks:
    - name: Create resources and Deploy App
      when: operation == "create"
      block:
        - name: Create resources in primary region
          ansible.builtin.include_tasks: tasks/create.yaml
          vars:
            region: "{{ creation_region }}"
            rds_instance_class: db.r5.large
            rds_engine: aurora-postgresql
          loop:
            - "{{ rds_primary_cluster_region }}"
            - "{{ rds_replica_cluster_region }}"
          loop_control:
            loop_var: creation_region

        - name: Create  Aurora db cluster
          ansible.builtin.import_tasks: tasks/create_aurora_db_cluster.yaml
          vars:
            rds_instance_class: db.r5.large
            rds_engine: aurora-postgresql

        # ================= Deploy App in the primary region =================


        - name: Get VPC info from primary region
          amazon.aws.ec2_vpc_net_info:
            filters:
              "tag:Name": "{{ vpc_name }}"
            region: "{{ rds_primary_cluster_region }}"
          register: primary_vpc

        - name: Get primary private subnet for workers
          amazon.aws.ec2_vpc_subnet_info:
            filters:
              vpc-id: "{{ primary_vpc.vpcs[0].id }}"
              cidr: "{{ subnet_cidr[1] }}"
            region: "{{ rds_primary_cluster_region }}"
          register: primary_private_subnet

        - name: Get VM info in the primary region
          amazon.aws.ec2_instance_info:
            filters:
              "tag:Name": "{{ deploy_flask_app_bastion_host_name }}"
              instance-state-name: [ "running"]
            region: "{{ rds_primary_cluster_region }}"
          register: primary_vm_result

        - name: Deploy app in primary region
          ansible.builtin.include_role:
            name: cloud.aws_ops.deploy_flask_app
          vars:
            deploy_flask_app_private_subnet_id: "{{ primary_private_subnet.subnets[0].id }}"
            deploy_flask_app_vpc_id: "{{ primary_vpc.vpcs[0].id }}"
            deploy_flask_app_vm_info: "{{ primary_vm_result }}"
            deploy_flask_app_rds_info: "{{ primary_instance_info_result }}"
            deploy_flask_app_region: "{{ rds_primary_cluster_region }}"

        - name: Get load balancer name from the primary region
          ansible.builtin.set_fact:
            primary_lb: "{{ deploy_flask_app_lb_result }}"

        # ================= Deploy App in the replica region =================

        - name: Get VPC info from replica region
          amazon.aws.ec2_vpc_net_info:
            filters:
              "tag:Name": "{{ vpc_name }}"
            region: "{{ rds_replica_cluster_region }}"
          register: replica_vpc

        - name: Get VM info in the replica region
          amazon.aws.ec2_instance_info:
            filters:
              "tag:Name": "{{ deploy_flask_app_bastion_host_name }}"
              instance-state-name: [ "running"]
            region: "{{ rds_replica_cluster_region }}"
          register: replica_vm_result

        - name: Get replica private subnet for workers
          amazon.aws.ec2_vpc_subnet_info:
            filters:
              vpc-id: "{{ replica_vpc.vpcs[0].id }}"
              cidr: "{{ subnet_cidr[1] }}"
            region: "{{ rds_replica_cluster_region }}"
          register: replica_private_subnet

        - name: Deploy app in replica region
          ansible.builtin.include_role:
            name: cloud.aws_ops.deploy_flask_app
          vars:
            deploy_flask_app_private_subnet_id: "{{ replica_private_subnet.subnets[0].id }}"
            deploy_flask_app_vpc_id: "{{ replica_vpc.vpcs[0].id }}"
            deploy_flask_app_vm_info: "{{ replica_vm_result }}"
            deploy_flask_app_rds_info: "{{ replica_instance_info_result }}"
            deploy_flask_app_region: "{{ rds_replica_cluster_region }}"

        - name: Get load balancer name from the replica region
          ansible.builtin.set_fact:
            replica_lb: "{{ deploy_flask_app_lb_result }}"

        - name: Add Route53 configurations
          ansible.builtin.include_tasks: tasks/add_route53_records.yaml

    # ================================================================================

    - name: Delete resources
      when: operation == "delete"
      block:

        - name: Delete Route 53 records and health checks
          ansible.builtin.import_tasks: tasks/delete_route53_records.yaml

        - name: Delete Aurora DB
          ansible.builtin.include_role:
            name: cloud.aws_ops.create_rds_global_cluster
          vars:
            create_rds_global_cluster_operation: delete
            create_rds_global_cluster_global_cluster_name: "{{ rds_global_cluster_name }}"
            create_rds_global_cluster_primary_cluster_name: "{{ rds_primary_cluster_name }}"
            create_rds_global_cluster_primary_cluster_region: "{{ rds_primary_cluster_region }}"
            create_rds_global_cluster_primary_cluster_instance_name: "{{ rds_primary_cluster_instance_name }}"
            create_rds_global_cluster_replica_cluster_name: "{{ rds_replica_cluster_name }}"
            create_rds_global_cluster_replica_cluster_region: "{{ rds_replica_cluster_region }}"
            create_rds_global_cluster_replica_cluster_instance_name: "{{ rds_replica_cluster_instance_name }}"

        - name: Delete all resources
          ansible.builtin.include_tasks: tasks/delete.yaml
          vars:
            region: "{{ deletion_region }}"
          loop:
            - "{{ rds_primary_cluster_region }}"
            - "{{ rds_replica_cluster_region }}"
          loop_control:
            loop_var: deletion_region
