---
- name: Delete resources playbook

  block:
    - name: Get vpc information
      amazon.aws.ec2_vpc_net_info:
        filters:
          tag:Name: "{{ vpc_name }}"
      register: vpc

    - name: Delete resources
      when: vpc.vpcs | length == 1
      block:
        - name: Set 'vpc_id' variable
          ansible.builtin.set_fact:
            vpc_id: "{{ vpc.vpcs.0.vpc_id }}"

        # Delete EC2 instances
        - name: Get EC2 instance info
          amazon.aws.ec2_instance_info:
            filters:
              vpc-id: "{{ vpc_id }}"
          register: ec2_instances

        - name: Delete ec2 instances from VPC
          amazon.aws.ec2_instance:
            instance_ids: "{{ ec2_instances.instances | map(attribute='instance_id') | list }}"
            wait: true
            state: terminated
          when: ec2_instances.instances | length > 0

        # Delete Load balancer
        - name: List Load balancer(s) from VPC
          community.aws.elb_classic_lb_info:
          register: load_balancers

        - name: Delete load balancer(s)
          amazon.aws.elb_classic_lb:
            name: "{{ item }}"
            wait: true
            state: absent
          with_items: "{{ load_balancers.elbs | selectattr('vpc_id', 'equalto', vpc_id) | map(attribute='load_balancer_name') | list }}"

        # Delete EC2 key pair
        - name: Delete EC2 key pair
          amazon.aws.ec2_key:
            name: "{{ deploy_flask_app_sshkey_pair_name }}"
            state: absent

        # Delete RDS information
        - name: Delete RDS instance
          amazon.aws.rds_instance:
            state: absent
            db_instance_identifier: "{{ rds_identifier }}"
            skip_final_snapshot: true
            wait: true

        - name: Delete RDS subnet group
          amazon.aws.rds_subnet_group:
            name: "{{ rds_subnet_group_name }}"
            state: absent

        # Delete VPC route table
        - name: List routes table from VPC
          amazon.aws.ec2_vpc_route_table_info:
            filters:
              vpc-id: "{{ vpc_id }}"
              association.main: false
          register: route_table

        - name: Delete VPC route table
          amazon.aws.ec2_vpc_route_table:
            route_table_id: "{{ item }}"
            vpc_id: "{{ vpc_id }}"
            lookup: id
            state: absent
          with_items: "{{ route_table.route_tables | map(attribute='id') | list }}"

        # Delete VPC route table
        - name: Get NAT gateway
          amazon.aws.ec2_vpc_nat_gateway_info:
            filters:
              vpc-id: "{{ vpc_id }}"
          register: nat_gw

        - name: Delete NAT gateway
          amazon.aws.ec2_vpc_nat_gateway:
            nat_gateway_id: "{{ item }}"
            state: absent
            wait: true
          with_items: "{{ nat_gw.result | map(attribute='nat_gateway_id') | list }}"

        # Delete Internet gateway
        - name: Delete internet gateway
          amazon.aws.ec2_vpc_igw:
            vpc_id: "{{ vpc_id }}"
            state: absent

        # Delete Subnets
        - name: List Subnets from VPC
          amazon.aws.ec2_vpc_subnet_info:
            filters:
              vpc-id: "{{ vpc_id }}"
          register: vpc_subnets

        - name: Delete subnets
          amazon.aws.ec2_vpc_subnet:
            cidr: "{{ item }}"
            state: absent
            vpc_id: "{{ vpc_id }}"
          with_items: "{{ vpc_subnets.subnets | map(attribute='cidr_block') | list }}"

        # Delete Security groups
        - name: List Security group from VPC
          amazon.aws.ec2_security_group_info:
            filters:
              vpc-id: "{{ vpc_id }}"
          register: secgroups

        - name: Delete security groups
          amazon.aws.ec2_security_group:
            state: absent
            group_id: "{{ item }}"
          with_items: "{{ secgroups.security_groups | rejectattr('group_name', 'equalto', 'default') | map(attribute='group_id') | list }}"

        # Delete VPC
        - name: Delete VPC
          amazon.aws.ec2_vpc_net:
            name: "{{ vpc_name }}"
            cidr_block: "{{ vpc_cidr }}"
            state: absent
          ignore_errors: true
