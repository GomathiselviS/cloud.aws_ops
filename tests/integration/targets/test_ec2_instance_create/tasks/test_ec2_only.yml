---
- block:
  - name: Create EC2 instance with no external SG, no IGW, no EIP
    ansible.builtin.include_role:
      name: cloud.aws_ops.ec2_instance_create
    vars:
      ec2_instance_create_operation: create
      ec2_instance_create_aws_region: "{{ aws_region }}"
      ec2_instance_create_instance_name: "only-ec2-{{ resource_prefix }}"
      ec2_instance_create_instance_type: "{{ ec2_instance_type }}"
      ec2_instance_create_ami_id: "{{ image_id }}"
      ec2_instance_create_vpc_subnet_id: "{{ subnet_id }}"
      ec2_instance_create_key_name: "{{ ec2_key_name }}"
      ec2_instance_create_associate_external_sg: false
      ec2_instance_create_associate_eip: false
      ec2_instance_create_associate_igw: false
      ec2_instance_create_tags:
        Environment: Testing
        Name: "{{ resource_prefix }}-instance"

  - name: Get EC2 instance info
    amazon.aws.ec2_instance_info:
      filters:
        "tag:Name": "only-ec2-{{ resource_prefix }}"
    register: _ec2_instance
    until: _ec2_instance.instances[0].state.name == 'running'
    retries: 12
    delay: 5

  - name: Validate EC2 creation (no SG, no IGW, no EIP)
    ansible.builtin.assert:
      that:
      - _ec2_instance.instances | length == 1
      - _ec2_instance.instances[0].state.name == 'running'
      - _ec2_instance.instances[0].tags.Name == "only-ec2-{{ resource_prefix }}"
      - _ec2_instance.instances[0].network_interfaces[0].groups[0].group_name == "default"
      - _ec2_instance.instances[0].key_name == ec2_key_name

  # cleanup leftover resources created by role
  always:
  - name: Terminate EC2 instance
    amazon.aws.ec2_instance:
      state: absent
      instance_ids: "{{ _ec2_instance.instances[0].instance_id }}"
      wait: true
    ignore_errors: true
