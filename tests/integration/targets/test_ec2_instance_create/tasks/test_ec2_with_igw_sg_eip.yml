---
- block:
  - name: Create EC2 instance with external SG, IGW, EIP
    ansible.builtin.include_role:
      name: cloud.aws_ops.ec2_instance_create
    vars:
      ec2_instance_create_operation: create
      ec2_instance_create_aws_region: "{{ aws_region }}"
      ec2_instance_create_instance_name: "ec2-all-enabled-{{ resource_prefix }}"
      ec2_instance_create_instance_type: "{{ ec2_instance_type }}"
      ec2_instance_create_ami_id: "{{ image_id }}"
      ec2_instance_create_vpc_subnet_id: "{{ subnet_id }}"
      ec2_instance_create_key_name: "{{ ec2_key_name }}"
      ec2_instance_create_vpc_id: "{{ vpc_id }}"
      ec2_instance_create_tags:
        Environment: Testing
        Name: "{{ resource_prefix }}-instance"

      # Optional: external security group
      ec2_instance_create_associate_external_sg: true
      ec2_instance_create_external_sg_name: "{{ external_sg_name }}"
      ec2_instance_create_external_sg_description: "{{ external_sg_description }}"
      ec2_instance_create_external_sg_rules:
      - proto: tcp
        ports: 22
        cidr_ip: 10.0.1.0/16
      - proto: tcp
        ports: 8000
        cidr_ip: 10.0.1.0/16
      ec2_instance_create_sg_tags:
        Environment: Testing
        Name: "{{ resource_prefix }}-sg"

      # Optional: EIP
      ec2_instance_create_associate_eip: true
      ec2_instance_create_eip_tags:
        Environment: Testing
        Name: "{{ resource_prefix }}-eip"

      # Optional: Internet Gateway
      ec2_instance_create_associate_igw: true
      ec2_instance_create_igw_tags:
        Environment: Testing
        Name: "{{ resource_prefix }}-igw"

  - name: Get EC2 instance info
    amazon.aws.ec2_instance_info:
      filters:
        "tag:Name": "ec2-all-enabled-{{ resource_prefix }}"
    register: _ec2_instance
    until: _ec2_instance.instances[0].state.name == 'running'
    retries: 12
    delay: 5

  - name: Gather information about Internet Gateway
    amazon.aws.ec2_vpc_igw_info:
      filters:
        "tag:Name": "{{ resource_prefix }}-igw"
    register: igw_info

  - name: print internet gateway info
    debug:
      var: igw_info

  - name: Gather information about security group
    amazon.aws.ec2_security_group_info:
      filters:
        "tag:Name": "{{ resource_prefix }}-sg"
    register: sg_info

  - name: print security group info
    debug:
      var: sg_info

  - name: Gather information about route table
    amazon.aws.ec2_vpc_route_table_info:
      filters:
        vpc-id: "{{ vpc_id }}"
    register: rtb_info

  - name: print route table info
    debug:
      var: rtb_info

  - name: Validate EC2 creation (SG, IGW, EIP)
    ansible.builtin.assert:
      that:
      - _ec2_instance.instances | length == 1
      - _ec2_instance.instances[0].state.name == 'running'
      - _ec2_instance.instances[0].tags.Name == "ec2-all-enabled-{{ resource_prefix }}"
      - _ec2_instance.instances[0].network_interfaces[0].groups[0].group_name == "{{ external_sg_name }}"
      - _ec2_instance.instances[0].key_name == ec2_key_name
      - igw_info.internet_gateways[0].attachments[0].vpc_id == "{{ vpc_id }}"
      - sg_info.security_groups[0].description == "{{ external_sg_description }}"
      - sg_info.security_groups[0].vpc_id == "{{ vpc_id }}"
      - rtb_info.route_tables[0].vpc_id == "{{ vpc_id }}"


  # cleanup leftover resources created by role
  always:
  - name: Terminate EC2 instance
    amazon.aws.ec2_instance:
      state: absent
      instance_ids: "{{ _ec2_instance.instances[0].instance_id }}"
      wait: true
    ignore_errors: true

  - name: Delete Internet gateway ensuring attached VPC is correct
    amazon.aws.ec2_vpc_igw:
      state: absent
      internet_gateway_id: "{{ igw_info.internet_gateways[0].internet_gateway_id }}"
      vpc_id: "{{ vpc_id }}"
    ignore_errors: true

  - name: Delete security group
    amazon.aws.ec2_security_group:
      group_id: "{{ sg_info.security_groups[0].group_id }}"
      state: absent
    ignore_errors: true
